@startuml 'Unity Player System Architecture'
'https://plantuml.com/class-diagram

scale 1.5

' Interfaces
interface IDamageable {
    + TakeDamage(damage: float): void
}

interface ITargetable {
    + GetTransform(): Transform
}

interface IContextBase {
    + Animator: Animator
    + RigidBody2D: Rigidbody2D
}

' Core Player Classes
class Player {
    + {static} OnPlayerDeath: Action
    + CanSkill: bool
    + CanMove: bool
    + OnMove: bool
    + CurrentState: PlayerState
    + FacingRight: bool
    + Rigidbody2D: Rigidbody2D
    + Animator: Animator
    + AttackState: PlayerAttackState
    + MoveState: PlayerMoveState
    + CastingState: PlayerCastingState
    + DeadState: PlayerDeadState
    + IdleState: PlayerIdleState
    + SkillState: PlayerSkillState
    + SkillJumpShoot: SkillJumpShoot
    - _health: EntityHealth
    
    - Die(): void
    - Flip(): void
    + FlipController(x: float): void
    + AnimationTrigger(): void
    + TakeDamage(damage: float): void
    + GetTransform(): Transform
}

class PlayerContext {
    + Animator: Animator
    + RigidBody2D: Rigidbody2D
}

class InputController {
    - _inputManager: InputManager
    - _playerStateMachine: PlayerStateMachine
    - _xInput: float
    
    - Awake(): void
    - OnEnable(): void
    - Update(): void
    - OnDisable(): void
    - OnPlayerDeath(): void
}

class PlayerStateMachine {
    - _player: Player
    
    - Awake(): void
    - Start(): void
    - Update(): void
    - StateChangeAction(): Action
    + Initialize(startState: PlayerState): void
    + ChangeState(newState: PlayerState): void
    + TryUseSkill(skillNumber: int): void
    - DieState(): void
    - TargetDieState(): void
    + UpdateInputX(inputX: float): void
}

class PlayerAnimationEvent {
    - _player: Player
    
    - Awake(): void
    + AnimationTrigger(): void
    + ArrowTrigger(): void
    + OnJumpStart_JumpShoot(): void
    + OnShootArrow_JumpShoot(): void
    + OnLanding__JumpShoot(): void
}

' Player States
abstract class PlayerState {
    # animBoolName: string
    # Player: Player
    # Animator: Animator
    # Rigidbody2D: Rigidbody2D
    + TriggerCalled: bool
    
    # Start(): void
    + Enter(): void
    + Exit(): void
    + AnimationTrigger(): void
}

class PlayerMoveState {
    - moveSpeed: float
    + XInput: float
    
    + Update(): void
    - OnMove(): void
}

class PlayerAttackState {
    - attackBase: AttackBase
    - attackSpeed: float
    - StartPoint: Transform
    
    # Start(): void
    + Enter(): void
    + Attack(): void
}

class PlayerCastingState {
    + Enter(): void
}

class PlayerSkillState {
    + Skill: SkillBase
    
    + Enter(): void
    + Update(): void
    + Exit(): void
}

class PlayerDeadState {
    + Enter(): void
}

class PlayerIdleState {
    + Enter(): void
}

' Attack System
abstract class AttackBase {
    # EndPoint: Transform
    # StartPoint: Transform
    
    + {abstract} Attack(): void
    + Initialize(startPoint: Transform, endPoint: Transform): void
}

class ShotArrow {
    - arrowPrefab: Arrow
    - arrows: Queue<Arrow>
    
    + Attack(): void
    - PoolArrow(): void
    - Arrow(arrow: Arrow): void
}

class Arrow {
    + TargetPlayerOrBot: bool
    - damage: float
    + Duration: float
    - particlePrefab: ParticleSystem
    - elapsedTime: float
    - groundVfx: bool
    - hasHitGround: bool
    - arrowCoroutine: Coroutine
    - collider2D: Collider2D
    - particle: ParticleSystem
    
    - Awake(): void
    - OnEnable(): void
    - OnTriggerEnter2D(other: Collider2D): void
    - ArrowParticle(): void
    - DamageAble(damageable: IDamageable): void
    - StopArrowCoroutine(): void
    - ResetArrow(): void
    - ShotArrowCoroutine(p0: Vector2, p1: Vector2, p2: Vector2): IEnumerator
    + ShotArrow(p0: Vector2, p1: Vector2, p2: Vector2): void
}

' Skill System
abstract class SkillBase {
    - cooldown: float
    - firstCooldown: float
    - lastTimeUsed: float
    - animationName: string
    + AnimationName: string
    # rb: Rigidbody2D
    # animator: Animator
    + TargetRigidBody2D: Rigidbody2D
    
    # Awake(): void
    + Initialize(context: IContextBase): void
    + CanUseSkill(): bool
    - OnCooldown(): bool
    + SetSillOnCooldown(): void
    + ResetCoolDownBy(cooldownReduction: float): void
    + ResetCooldown(): void
    + ExecuteSkill(): void
    # {abstract} SkillCoroutine(): IEnumerator
}

class SkillJumpShoot {
    - jumpHeight: float
    - jumpDuration: float
    - jumpCurve: AnimationCurve
    - _isSkillActive: bool
    - _originalPosition: Vector3
    - _currentSkillCoroutine: Coroutine
    
    # SkillCoroutine(): IEnumerator
    - ExecuteJump(): IEnumerator
    - RisePhase(): IEnumerator
    - HoverPhase(): IEnumerator
    - FallPhase(): IEnumerator
    + CancelSkill(): void
    + OnJumpStart(): void
    + OnShootArrow(): void
    + OnLanding(): void
}

' Inheritance relationships
PlayerMoveState --|> PlayerState
PlayerAttackState --|> PlayerState
PlayerCastingState --|> PlayerState
PlayerSkillState --|> PlayerState
PlayerDeadState --|> PlayerState
PlayerIdleState --|> PlayerState

ShotArrow --|> AttackBase
SkillJumpShoot --|> SkillBase

' Interface implementations
Player ..|> IDamageable
Player ..|> ITargetable
PlayerContext ..|> IContextBase

' Composition relationships
Player *-- PlayerMoveState
Player *-- PlayerAttackState
Player *-- PlayerCastingState
Player *-- PlayerSkillState
Player *-- PlayerDeadState
Player *-- PlayerIdleState
Player *-- SkillJumpShoot

PlayerStateMachine --> Player : controls
InputController --> PlayerStateMachine : uses
PlayerAnimationEvent --> Player : triggers

PlayerAttackState --> AttackBase : uses
ShotArrow --> Arrow : creates/pools
SkillBase --> IContextBase : uses

' Association relationships
PlayerState --> Player : references
Arrow ..> IDamageable : damages

@enduml